#include <bits/stdc++.h>
#define ________ make_pair
#define _____________ emplace
#define ______________ push_back
#define _______________ count
#define ________________ int
#define _________________ cout
#define __________________ return 0
using namespace std;
typedef pair<________________, ________________> _______;
________________ _, __, ___;
map<_______, vector<________________>> _____;
string ____[] = {"", "fill A", "fill B", "empty A", "empty B", "pour A B", "pour B A"};
________________ main()
{
    cin >> _ >> __ >> ___;
    queue<_______> ______;
    ______._____________(0, 0);
    while (!______.empty())
    {
        ________________ _________ = ______.front().first, __________ = ______.front().second;
        ______.pop();
        if (__________ == ___)
        {
            for (________________ i : _____[________(_________, __________)])
            {
                _________________ << ____[i] << endl;
            }
            //_________________ << "empty A" << endl;
            _________________ << "success" << endl;
            break;
        }
        if (!_____._______________(________(_, __________)))
        {
            _____[________(_, __________)] = _____[________(_________, __________)];
            _____[________(_, __________)].______________(1);
            ______._____________(_, __________);
        }
        if (!_____._______________(________(_________, __)))
        {
            _____[________(_________, __)] = _____[________(_________, __________)];
            _____[________(_________, __)].______________(2);
            ______._____________(_________, __);
        }
        if (!_____._______________(________(0, __________)))
        {
            _____[________(0, __________)] = _____[________(_________, __________)];
            _____[________(0, __________)].______________(3);
            ______._____________(0, __________);
        }
        if (!_____._______________(________(_________, 0)))
        {
            _____[________(_________, 0)] = _____[________(_________, __________)];
            _____[________(_________, 0)].______________(4);
            ______._____________(_________, 0);
        }
        ________________ ___________ = _________, ____________ = __________;
        if (____________ + _________ > __)
        {
            ___________ = ____________ + _________ - __;
            ____________ = __;
        }
        else
        {
            ____________ = ____________ + _________;
            ___________ = 0;
        }
        if (!_____._______________(________(___________, ____________)))
        {
            _____[________(___________, ____________)] = _____[________(_________, __________)];
            _____[________(___________, ____________)].______________(5);
            ______._____________(___________, ____________);
        }
        ___________ = _________, ____________ = __________;
        if (___________ + __________ > _)
        {
            ____________ = ___________ + __________ - _;
            ___________ = _;
        }
        else
        {
            ___________ = ___________ + __________;
            ____________ = 0;
        }
        if (!_____._______________(________(___________, ____________)))
        {
            _____[________(___________, ____________)] = _____[________(_________, __________)];
            _____[________(___________, ____________)].______________(6);
            ______._____________(___________, ____________);
        }
    }
    __________________;
}
